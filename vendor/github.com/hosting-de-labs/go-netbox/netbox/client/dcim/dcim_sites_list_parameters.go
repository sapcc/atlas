// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dcim

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDcimSitesListParams creates a new DcimSitesListParams object
// with the default values initialized.
func NewDcimSitesListParams() *DcimSitesListParams {
	var ()
	return &DcimSitesListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDcimSitesListParamsWithTimeout creates a new DcimSitesListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDcimSitesListParamsWithTimeout(timeout time.Duration) *DcimSitesListParams {
	var ()
	return &DcimSitesListParams{

		timeout: timeout,
	}
}

// NewDcimSitesListParamsWithContext creates a new DcimSitesListParams object
// with the default values initialized, and the ability to set a context for a request
func NewDcimSitesListParamsWithContext(ctx context.Context) *DcimSitesListParams {
	var ()
	return &DcimSitesListParams{

		Context: ctx,
	}
}

// NewDcimSitesListParamsWithHTTPClient creates a new DcimSitesListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDcimSitesListParamsWithHTTPClient(client *http.Client) *DcimSitesListParams {
	var ()
	return &DcimSitesListParams{
		HTTPClient: client,
	}
}

/*DcimSitesListParams contains all the parameters to send to the API endpoint
for the dcim sites list operation typically these are written to a http.Request
*/
type DcimSitesListParams struct {

	/*Asn*/
	Asn *float64
	/*ContactEmail*/
	ContactEmail *string
	/*ContactName*/
	ContactName *string
	/*ContactPhone*/
	ContactPhone *string
	/*Created*/
	Created *string
	/*CreatedGte*/
	CreatedGte *string
	/*CreatedLte*/
	CreatedLte *string
	/*Facility*/
	Facility *string
	/*ID*/
	ID *int64
	/*IDIn
	  Multiple values may be separated by commas.

	*/
	IDIn *string
	/*LastUpdated*/
	LastUpdated *string
	/*LastUpdatedGte*/
	LastUpdatedGte *string
	/*LastUpdatedLte*/
	LastUpdatedLte *string
	/*Latitude*/
	Latitude *string
	/*Limit
	  Number of results to return per page.

	*/
	Limit *int64
	/*Longitude*/
	Longitude *string
	/*Name*/
	Name *string
	/*Offset
	  The initial index from which to return the results.

	*/
	Offset *int64
	/*Q*/
	Q *string
	/*Region*/
	Region *string
	/*RegionID*/
	RegionID *int64
	/*Slug*/
	Slug *string
	/*Status*/
	Status *string
	/*Tag*/
	Tag *string
	/*Tenant*/
	Tenant *string
	/*TenantGroup*/
	TenantGroup *string
	/*TenantGroupID*/
	TenantGroupID *int64
	/*TenantID*/
	TenantID *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the dcim sites list params
func (o *DcimSitesListParams) WithTimeout(timeout time.Duration) *DcimSitesListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the dcim sites list params
func (o *DcimSitesListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the dcim sites list params
func (o *DcimSitesListParams) WithContext(ctx context.Context) *DcimSitesListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the dcim sites list params
func (o *DcimSitesListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the dcim sites list params
func (o *DcimSitesListParams) WithHTTPClient(client *http.Client) *DcimSitesListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the dcim sites list params
func (o *DcimSitesListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAsn adds the asn to the dcim sites list params
func (o *DcimSitesListParams) WithAsn(asn *float64) *DcimSitesListParams {
	o.SetAsn(asn)
	return o
}

// SetAsn adds the asn to the dcim sites list params
func (o *DcimSitesListParams) SetAsn(asn *float64) {
	o.Asn = asn
}

// WithContactEmail adds the contactEmail to the dcim sites list params
func (o *DcimSitesListParams) WithContactEmail(contactEmail *string) *DcimSitesListParams {
	o.SetContactEmail(contactEmail)
	return o
}

// SetContactEmail adds the contactEmail to the dcim sites list params
func (o *DcimSitesListParams) SetContactEmail(contactEmail *string) {
	o.ContactEmail = contactEmail
}

// WithContactName adds the contactName to the dcim sites list params
func (o *DcimSitesListParams) WithContactName(contactName *string) *DcimSitesListParams {
	o.SetContactName(contactName)
	return o
}

// SetContactName adds the contactName to the dcim sites list params
func (o *DcimSitesListParams) SetContactName(contactName *string) {
	o.ContactName = contactName
}

// WithContactPhone adds the contactPhone to the dcim sites list params
func (o *DcimSitesListParams) WithContactPhone(contactPhone *string) *DcimSitesListParams {
	o.SetContactPhone(contactPhone)
	return o
}

// SetContactPhone adds the contactPhone to the dcim sites list params
func (o *DcimSitesListParams) SetContactPhone(contactPhone *string) {
	o.ContactPhone = contactPhone
}

// WithCreated adds the created to the dcim sites list params
func (o *DcimSitesListParams) WithCreated(created *string) *DcimSitesListParams {
	o.SetCreated(created)
	return o
}

// SetCreated adds the created to the dcim sites list params
func (o *DcimSitesListParams) SetCreated(created *string) {
	o.Created = created
}

// WithCreatedGte adds the createdGte to the dcim sites list params
func (o *DcimSitesListParams) WithCreatedGte(createdGte *string) *DcimSitesListParams {
	o.SetCreatedGte(createdGte)
	return o
}

// SetCreatedGte adds the createdGte to the dcim sites list params
func (o *DcimSitesListParams) SetCreatedGte(createdGte *string) {
	o.CreatedGte = createdGte
}

// WithCreatedLte adds the createdLte to the dcim sites list params
func (o *DcimSitesListParams) WithCreatedLte(createdLte *string) *DcimSitesListParams {
	o.SetCreatedLte(createdLte)
	return o
}

// SetCreatedLte adds the createdLte to the dcim sites list params
func (o *DcimSitesListParams) SetCreatedLte(createdLte *string) {
	o.CreatedLte = createdLte
}

// WithFacility adds the facility to the dcim sites list params
func (o *DcimSitesListParams) WithFacility(facility *string) *DcimSitesListParams {
	o.SetFacility(facility)
	return o
}

// SetFacility adds the facility to the dcim sites list params
func (o *DcimSitesListParams) SetFacility(facility *string) {
	o.Facility = facility
}

// WithID adds the id to the dcim sites list params
func (o *DcimSitesListParams) WithID(id *int64) *DcimSitesListParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the dcim sites list params
func (o *DcimSitesListParams) SetID(id *int64) {
	o.ID = id
}

// WithIDIn adds the iDIn to the dcim sites list params
func (o *DcimSitesListParams) WithIDIn(iDIn *string) *DcimSitesListParams {
	o.SetIDIn(iDIn)
	return o
}

// SetIDIn adds the idIn to the dcim sites list params
func (o *DcimSitesListParams) SetIDIn(iDIn *string) {
	o.IDIn = iDIn
}

// WithLastUpdated adds the lastUpdated to the dcim sites list params
func (o *DcimSitesListParams) WithLastUpdated(lastUpdated *string) *DcimSitesListParams {
	o.SetLastUpdated(lastUpdated)
	return o
}

// SetLastUpdated adds the lastUpdated to the dcim sites list params
func (o *DcimSitesListParams) SetLastUpdated(lastUpdated *string) {
	o.LastUpdated = lastUpdated
}

// WithLastUpdatedGte adds the lastUpdatedGte to the dcim sites list params
func (o *DcimSitesListParams) WithLastUpdatedGte(lastUpdatedGte *string) *DcimSitesListParams {
	o.SetLastUpdatedGte(lastUpdatedGte)
	return o
}

// SetLastUpdatedGte adds the lastUpdatedGte to the dcim sites list params
func (o *DcimSitesListParams) SetLastUpdatedGte(lastUpdatedGte *string) {
	o.LastUpdatedGte = lastUpdatedGte
}

// WithLastUpdatedLte adds the lastUpdatedLte to the dcim sites list params
func (o *DcimSitesListParams) WithLastUpdatedLte(lastUpdatedLte *string) *DcimSitesListParams {
	o.SetLastUpdatedLte(lastUpdatedLte)
	return o
}

// SetLastUpdatedLte adds the lastUpdatedLte to the dcim sites list params
func (o *DcimSitesListParams) SetLastUpdatedLte(lastUpdatedLte *string) {
	o.LastUpdatedLte = lastUpdatedLte
}

// WithLatitude adds the latitude to the dcim sites list params
func (o *DcimSitesListParams) WithLatitude(latitude *string) *DcimSitesListParams {
	o.SetLatitude(latitude)
	return o
}

// SetLatitude adds the latitude to the dcim sites list params
func (o *DcimSitesListParams) SetLatitude(latitude *string) {
	o.Latitude = latitude
}

// WithLimit adds the limit to the dcim sites list params
func (o *DcimSitesListParams) WithLimit(limit *int64) *DcimSitesListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the dcim sites list params
func (o *DcimSitesListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithLongitude adds the longitude to the dcim sites list params
func (o *DcimSitesListParams) WithLongitude(longitude *string) *DcimSitesListParams {
	o.SetLongitude(longitude)
	return o
}

// SetLongitude adds the longitude to the dcim sites list params
func (o *DcimSitesListParams) SetLongitude(longitude *string) {
	o.Longitude = longitude
}

// WithName adds the name to the dcim sites list params
func (o *DcimSitesListParams) WithName(name *string) *DcimSitesListParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the dcim sites list params
func (o *DcimSitesListParams) SetName(name *string) {
	o.Name = name
}

// WithOffset adds the offset to the dcim sites list params
func (o *DcimSitesListParams) WithOffset(offset *int64) *DcimSitesListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the dcim sites list params
func (o *DcimSitesListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithQ adds the q to the dcim sites list params
func (o *DcimSitesListParams) WithQ(q *string) *DcimSitesListParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the dcim sites list params
func (o *DcimSitesListParams) SetQ(q *string) {
	o.Q = q
}

// WithRegion adds the region to the dcim sites list params
func (o *DcimSitesListParams) WithRegion(region *string) *DcimSitesListParams {
	o.SetRegion(region)
	return o
}

// SetRegion adds the region to the dcim sites list params
func (o *DcimSitesListParams) SetRegion(region *string) {
	o.Region = region
}

// WithRegionID adds the regionID to the dcim sites list params
func (o *DcimSitesListParams) WithRegionID(regionID *int64) *DcimSitesListParams {
	o.SetRegionID(regionID)
	return o
}

// SetRegionID adds the regionId to the dcim sites list params
func (o *DcimSitesListParams) SetRegionID(regionID *int64) {
	o.RegionID = regionID
}

// WithSlug adds the slug to the dcim sites list params
func (o *DcimSitesListParams) WithSlug(slug *string) *DcimSitesListParams {
	o.SetSlug(slug)
	return o
}

// SetSlug adds the slug to the dcim sites list params
func (o *DcimSitesListParams) SetSlug(slug *string) {
	o.Slug = slug
}

// WithStatus adds the status to the dcim sites list params
func (o *DcimSitesListParams) WithStatus(status *string) *DcimSitesListParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the dcim sites list params
func (o *DcimSitesListParams) SetStatus(status *string) {
	o.Status = status
}

// WithTag adds the tag to the dcim sites list params
func (o *DcimSitesListParams) WithTag(tag *string) *DcimSitesListParams {
	o.SetTag(tag)
	return o
}

// SetTag adds the tag to the dcim sites list params
func (o *DcimSitesListParams) SetTag(tag *string) {
	o.Tag = tag
}

// WithTenant adds the tenant to the dcim sites list params
func (o *DcimSitesListParams) WithTenant(tenant *string) *DcimSitesListParams {
	o.SetTenant(tenant)
	return o
}

// SetTenant adds the tenant to the dcim sites list params
func (o *DcimSitesListParams) SetTenant(tenant *string) {
	o.Tenant = tenant
}

// WithTenantGroup adds the tenantGroup to the dcim sites list params
func (o *DcimSitesListParams) WithTenantGroup(tenantGroup *string) *DcimSitesListParams {
	o.SetTenantGroup(tenantGroup)
	return o
}

// SetTenantGroup adds the tenantGroup to the dcim sites list params
func (o *DcimSitesListParams) SetTenantGroup(tenantGroup *string) {
	o.TenantGroup = tenantGroup
}

// WithTenantGroupID adds the tenantGroupID to the dcim sites list params
func (o *DcimSitesListParams) WithTenantGroupID(tenantGroupID *int64) *DcimSitesListParams {
	o.SetTenantGroupID(tenantGroupID)
	return o
}

// SetTenantGroupID adds the tenantGroupId to the dcim sites list params
func (o *DcimSitesListParams) SetTenantGroupID(tenantGroupID *int64) {
	o.TenantGroupID = tenantGroupID
}

// WithTenantID adds the tenantID to the dcim sites list params
func (o *DcimSitesListParams) WithTenantID(tenantID *int64) *DcimSitesListParams {
	o.SetTenantID(tenantID)
	return o
}

// SetTenantID adds the tenantId to the dcim sites list params
func (o *DcimSitesListParams) SetTenantID(tenantID *int64) {
	o.TenantID = tenantID
}

// WriteToRequest writes these params to a swagger request
func (o *DcimSitesListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Asn != nil {

		// query param asn
		var qrAsn float64
		if o.Asn != nil {
			qrAsn = *o.Asn
		}
		qAsn := swag.FormatFloat64(qrAsn)
		if qAsn != "" {
			if err := r.SetQueryParam("asn", qAsn); err != nil {
				return err
			}
		}

	}

	if o.ContactEmail != nil {

		// query param contact_email
		var qrContactEmail string
		if o.ContactEmail != nil {
			qrContactEmail = *o.ContactEmail
		}
		qContactEmail := qrContactEmail
		if qContactEmail != "" {
			if err := r.SetQueryParam("contact_email", qContactEmail); err != nil {
				return err
			}
		}

	}

	if o.ContactName != nil {

		// query param contact_name
		var qrContactName string
		if o.ContactName != nil {
			qrContactName = *o.ContactName
		}
		qContactName := qrContactName
		if qContactName != "" {
			if err := r.SetQueryParam("contact_name", qContactName); err != nil {
				return err
			}
		}

	}

	if o.ContactPhone != nil {

		// query param contact_phone
		var qrContactPhone string
		if o.ContactPhone != nil {
			qrContactPhone = *o.ContactPhone
		}
		qContactPhone := qrContactPhone
		if qContactPhone != "" {
			if err := r.SetQueryParam("contact_phone", qContactPhone); err != nil {
				return err
			}
		}

	}

	if o.Created != nil {

		// query param created
		var qrCreated string
		if o.Created != nil {
			qrCreated = *o.Created
		}
		qCreated := qrCreated
		if qCreated != "" {
			if err := r.SetQueryParam("created", qCreated); err != nil {
				return err
			}
		}

	}

	if o.CreatedGte != nil {

		// query param created__gte
		var qrCreatedGte string
		if o.CreatedGte != nil {
			qrCreatedGte = *o.CreatedGte
		}
		qCreatedGte := qrCreatedGte
		if qCreatedGte != "" {
			if err := r.SetQueryParam("created__gte", qCreatedGte); err != nil {
				return err
			}
		}

	}

	if o.CreatedLte != nil {

		// query param created__lte
		var qrCreatedLte string
		if o.CreatedLte != nil {
			qrCreatedLte = *o.CreatedLte
		}
		qCreatedLte := qrCreatedLte
		if qCreatedLte != "" {
			if err := r.SetQueryParam("created__lte", qCreatedLte); err != nil {
				return err
			}
		}

	}

	if o.Facility != nil {

		// query param facility
		var qrFacility string
		if o.Facility != nil {
			qrFacility = *o.Facility
		}
		qFacility := qrFacility
		if qFacility != "" {
			if err := r.SetQueryParam("facility", qFacility); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID int64
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatInt64(qrID)
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.IDIn != nil {

		// query param id__in
		var qrIDIn string
		if o.IDIn != nil {
			qrIDIn = *o.IDIn
		}
		qIDIn := qrIDIn
		if qIDIn != "" {
			if err := r.SetQueryParam("id__in", qIDIn); err != nil {
				return err
			}
		}

	}

	if o.LastUpdated != nil {

		// query param last_updated
		var qrLastUpdated string
		if o.LastUpdated != nil {
			qrLastUpdated = *o.LastUpdated
		}
		qLastUpdated := qrLastUpdated
		if qLastUpdated != "" {
			if err := r.SetQueryParam("last_updated", qLastUpdated); err != nil {
				return err
			}
		}

	}

	if o.LastUpdatedGte != nil {

		// query param last_updated__gte
		var qrLastUpdatedGte string
		if o.LastUpdatedGte != nil {
			qrLastUpdatedGte = *o.LastUpdatedGte
		}
		qLastUpdatedGte := qrLastUpdatedGte
		if qLastUpdatedGte != "" {
			if err := r.SetQueryParam("last_updated__gte", qLastUpdatedGte); err != nil {
				return err
			}
		}

	}

	if o.LastUpdatedLte != nil {

		// query param last_updated__lte
		var qrLastUpdatedLte string
		if o.LastUpdatedLte != nil {
			qrLastUpdatedLte = *o.LastUpdatedLte
		}
		qLastUpdatedLte := qrLastUpdatedLte
		if qLastUpdatedLte != "" {
			if err := r.SetQueryParam("last_updated__lte", qLastUpdatedLte); err != nil {
				return err
			}
		}

	}

	if o.Latitude != nil {

		// query param latitude
		var qrLatitude string
		if o.Latitude != nil {
			qrLatitude = *o.Latitude
		}
		qLatitude := qrLatitude
		if qLatitude != "" {
			if err := r.SetQueryParam("latitude", qLatitude); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Longitude != nil {

		// query param longitude
		var qrLongitude string
		if o.Longitude != nil {
			qrLongitude = *o.Longitude
		}
		qLongitude := qrLongitude
		if qLongitude != "" {
			if err := r.SetQueryParam("longitude", qLongitude); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if o.Region != nil {

		// query param region
		var qrRegion string
		if o.Region != nil {
			qrRegion = *o.Region
		}
		qRegion := qrRegion
		if qRegion != "" {
			if err := r.SetQueryParam("region", qRegion); err != nil {
				return err
			}
		}

	}

	if o.RegionID != nil {

		// query param region_id
		var qrRegionID int64
		if o.RegionID != nil {
			qrRegionID = *o.RegionID
		}
		qRegionID := swag.FormatInt64(qrRegionID)
		if qRegionID != "" {
			if err := r.SetQueryParam("region_id", qRegionID); err != nil {
				return err
			}
		}

	}

	if o.Slug != nil {

		// query param slug
		var qrSlug string
		if o.Slug != nil {
			qrSlug = *o.Slug
		}
		qSlug := qrSlug
		if qSlug != "" {
			if err := r.SetQueryParam("slug", qSlug); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if o.Tag != nil {

		// query param tag
		var qrTag string
		if o.Tag != nil {
			qrTag = *o.Tag
		}
		qTag := qrTag
		if qTag != "" {
			if err := r.SetQueryParam("tag", qTag); err != nil {
				return err
			}
		}

	}

	if o.Tenant != nil {

		// query param tenant
		var qrTenant string
		if o.Tenant != nil {
			qrTenant = *o.Tenant
		}
		qTenant := qrTenant
		if qTenant != "" {
			if err := r.SetQueryParam("tenant", qTenant); err != nil {
				return err
			}
		}

	}

	if o.TenantGroup != nil {

		// query param tenant_group
		var qrTenantGroup string
		if o.TenantGroup != nil {
			qrTenantGroup = *o.TenantGroup
		}
		qTenantGroup := qrTenantGroup
		if qTenantGroup != "" {
			if err := r.SetQueryParam("tenant_group", qTenantGroup); err != nil {
				return err
			}
		}

	}

	if o.TenantGroupID != nil {

		// query param tenant_group_id
		var qrTenantGroupID int64
		if o.TenantGroupID != nil {
			qrTenantGroupID = *o.TenantGroupID
		}
		qTenantGroupID := swag.FormatInt64(qrTenantGroupID)
		if qTenantGroupID != "" {
			if err := r.SetQueryParam("tenant_group_id", qTenantGroupID); err != nil {
				return err
			}
		}

	}

	if o.TenantID != nil {

		// query param tenant_id
		var qrTenantID int64
		if o.TenantID != nil {
			qrTenantID = *o.TenantID
		}
		qTenantID := swag.FormatInt64(qrTenantID)
		if qTenantID != "" {
			if err := r.SetQueryParam("tenant_id", qTenantID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
