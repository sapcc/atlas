// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Platform platform
// swagger:model Platform
type Platform struct {

	// ID
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// manufacturer
	Manufacturer *NestedManufacturer `json:"manufacturer,omitempty"`

	// Name
	// Required: true
	// Max Length: 50
	// Min Length: 1
	Name *string `json:"name"`

	// NAPALM arguments
	//
	// Additional arguments to pass when initiating the NAPALM driver (JSON format)
	NapalmArgs string `json:"napalm_args,omitempty"`

	// NAPALM driver
	//
	// The name of the NAPALM driver to use when interacting with devices
	// Max Length: 50
	NapalmDriver string `json:"napalm_driver,omitempty"`

	// Legacy RPC client
	// Enum: [juniper-junos cisco-ios opengear]
	RPCClient string `json:"rpc_client,omitempty"`

	// Slug
	// Required: true
	// Max Length: 50
	// Min Length: 1
	// Pattern: ^[-a-zA-Z0-9_]+$
	Slug *string `json:"slug"`
}

// Validate validates this platform
func (m *Platform) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateManufacturer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNapalmDriver(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRPCClient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlug(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Platform) validateManufacturer(formats strfmt.Registry) error {

	if swag.IsZero(m.Manufacturer) { // not required
		return nil
	}

	if m.Manufacturer != nil {
		if err := m.Manufacturer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("manufacturer")
			}
			return err
		}
	}

	return nil
}

func (m *Platform) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 50); err != nil {
		return err
	}

	return nil
}

func (m *Platform) validateNapalmDriver(formats strfmt.Registry) error {

	if swag.IsZero(m.NapalmDriver) { // not required
		return nil
	}

	if err := validate.MaxLength("napalm_driver", "body", string(m.NapalmDriver), 50); err != nil {
		return err
	}

	return nil
}

var platformTypeRPCClientPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["juniper-junos","cisco-ios","opengear"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		platformTypeRPCClientPropEnum = append(platformTypeRPCClientPropEnum, v)
	}
}

const (

	// PlatformRPCClientJuniperJunos captures enum value "juniper-junos"
	PlatformRPCClientJuniperJunos string = "juniper-junos"

	// PlatformRPCClientCiscoIos captures enum value "cisco-ios"
	PlatformRPCClientCiscoIos string = "cisco-ios"

	// PlatformRPCClientOpengear captures enum value "opengear"
	PlatformRPCClientOpengear string = "opengear"
)

// prop value enum
func (m *Platform) validateRPCClientEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, platformTypeRPCClientPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Platform) validateRPCClient(formats strfmt.Registry) error {

	if swag.IsZero(m.RPCClient) { // not required
		return nil
	}

	// value enum
	if err := m.validateRPCClientEnum("rpc_client", "body", m.RPCClient); err != nil {
		return err
	}

	return nil
}

func (m *Platform) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("slug", "body", m.Slug); err != nil {
		return err
	}

	if err := validate.MinLength("slug", "body", string(*m.Slug), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("slug", "body", string(*m.Slug), 50); err != nil {
		return err
	}

	if err := validate.Pattern("slug", "body", string(*m.Slug), `^[-a-zA-Z0-9_]+$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Platform) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Platform) UnmarshalBinary(b []byte) error {
	var res Platform
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
